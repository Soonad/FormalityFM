type Nat {
  zero,
  succ(pred: Nat),
}

Nat.pred(n: Nat): Nat
  case n {
    zero: Nat.zero,
    succ: n.pred
  }

Nat.is_zero(n: Nat): Bool
  case n {
    zero: Bool.true,
    succ: Bool.false,
  }

Nat.apply<A: Type>(n: Nat, f: (x:A) A, x: A): A
  case n {
    zero: x,
    succ: Nat.apply<A>(n.pred, f, f(x)),
  }

Nat.to_base(base: Nat, nat: Nat): List(Nat)
  Nat.to_base.go(base, nat, List.nil<Nat>)

Nat.to_base.go(base: Nat, nat: Nat, res: List(Nat)): List(Nat)
  open Nat.div_mod(nat, base) as div_mod
  case div_mod.fst {
    zero: List.cons<_>(div_mod.snd, res),
    succ: Nat.to_base.go(base, div_mod.fst, List.cons<_>(div_mod.snd, res))
  }

Nat.from_base(base: Nat, ds: List(Nat)) : Nat
  Nat.from_base.go(base, List.reverse<_>(ds),1,0)

Nat.from_base.go(b: Nat, ds: List(Nat), p: Nat, res: Nat) : Nat
  case ds {
    nil: res,
    cons: Nat.from_base.go(b,ds.tail,Nat.mul(b,p), Nat.add(Nat.mul(ds.head,p),res))
  }

Nat.to_string_base(base: Nat, nat: Nat): String
  List.fold<_>(Nat.to_base(base, nat))<_>(
    String.nil,
    (n, str) String.cons(Nat.show_digit(base,n), str))

Nat.to_bits(n: Nat): Bits
  case n {
    zero: Bits.e,
    succ: Bits.inc(Nat.to_bits(n.pred))
  }

Nat.add(n: Nat, m: Nat): Nat
  case n {
    zero: m,
    succ: Nat.succ(Nat.add(n.pred, m)),
  }

Nat.sub(n: Nat, m: Nat): Nat
  case n {
    zero: 0,
    succ: case m {
      zero: n,
      succ: Nat.sub(n.pred, m.pred)
    }
  }

Nat.cmp(a: Nat, b: Nat): Cmp
  case a {
    zero: case b {
      zero: Cmp.eql,
      succ: Cmp.ltn,
    },
    succ: case b {
      zero: Cmp.gtn,
      succ: Nat.cmp(a.pred, b.pred),
    },
  }

Nat.mul(n: Nat, m: Nat): Nat
  case n {
    zero: Nat.zero,
    succ: Nat.add(m, Nat.mul(n.pred, m))
  }

Nat.sub_rem(n: Nat, m: Nat): Either(Nat, Nat)
  case m {
    zero: Either.left<_,_>(n),
    succ: case n {
      zero: Either.right<_,_>(Nat.succ(m.pred)),
      succ: Nat.sub_rem(n.pred, m.pred),
    }
  }

Nat.div_mod(n: Nat, m: Nat): Pair(Nat, Nat)
  Nat.div_mod.go(n, m, Nat.zero)

Nat.div_mod.go(n: Nat, m: Nat, d: Nat): Pair(Nat, Nat)
  case Nat.sub_rem(n, m) as p {
    left: Nat.div_mod.go(p.value, m, Nat.succ(d)),
    right: Pair.new<_,_>(d, n),
  }

Nat.div(n: Nat, m: Nat): Nat
  Pair.fst<_,_>(Nat.div_mod(n, m))

Nat.mod(n: Nat, m: Nat): Nat
  Pair.snd<_,_>(Nat.div_mod(n, m))

Nat.double(n: Nat): Nat
  case n {
    zero: Nat.zero,
    succ: Nat.succ(Nat.succ(Nat.double(n.pred))),
  }

// n >= m
Nat.gte(n: Nat, m: Nat): Bool
  Cmp.as_gte(Nat.cmp(n, m))

// n > m
Nat.gtn(n: Nat, m: Nat): Bool
  Cmp.as_gtn(Nat.cmp(n, m))

// n == m
Nat.eql(n: Nat, m: Nat): Bool
  Cmp.as_eql(Nat.cmp(n, m))

// n <= m
Nat.lte(n: Nat, m: Nat): Bool
  Cmp.as_lte(Nat.cmp(n, m))

// n < m
Nat.ltn(n: Nat, m: Nat): Bool
  Cmp.as_ltn(Nat.cmp(n, m))

Nat.is_even(n: Nat): Bool
  case n {
    zero: Bool.true
    succ: Bool.not(Nat.is_even(n.pred))
  }

Nat.show(n: Nat): String
  Nat.to_string_base(10,n)

Nat.show_digit(base: Nat, n: Nat) : Char
  let m = Nat.mod(n,base);
  let base64 =
    ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
    ,'G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V'
    ,'W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l'
    ,'m','n','o','p','q','r','s','t','u','v','w','x','y','z','+','/'];
  if Bool.and(Nat.gtn(base,0),Nat.lte(base,64)) then
    let c = List.at<_>(m,base64)
    case c {
      none: '#',
      some: c.value,
    }
  else '#'

//Nat.to_u8(n: Nat): U8
  //Nat.apply<U8>(n, U8.inc, U8.0)

// TODO: optimize (this is swapped on the JS compiler though)
Nat.to_u16(n: Nat): U16
  Nat.apply<U16>(n, U16.inc, U16.zero)

Nat.to_u32(n: Nat): U32
  Nat.apply<U32>(n, U32.inc, U32.zero)
  
//Nat.to_u64(n: Nat): U64
  //Nat.apply<U64>(n, U64.inc, U64.0)

//Nat.to_u256(n: Nat): U256
  //Nat.apply<U256>(n,U256.inc, U256.0)

Nat.bitwise_and(a: Nat, b: Nat): Nat
  case Bool.or(Nat.eql(a, 0), Nat.eql(a, 0)){
  true : 0
  false: 
    let bit = Bool.if<Nat>(Bool.or(Nat.eql(Nat.mod(a, 2), 0), Nat.eql(Nat.mod(b, 2), 0)), 0, 1)
    let a = Nat.div(a, 2)
    let b = Nat.div(b, 2)
    Nat.add(bit, Nat.mul(2, Nat.bitwise_and(a, b)))
  }

// Nat.zero_not_succ(a: Nat): Not(0 == Nat.succ(a))
//   (eq)
//   def P = (x) 
//     case x{ 
//       zero: Unit
//       succ: Empty
//     }
//   Equal.rewrite<Nat, 0, Nat.succ(a), P>(eq, Unit.new)

// Nat.equal(a: Nat, b: Nat): Either(a == b, Not(a == b))
//   case a {
//     zero: case b {
//       zero: Either.left<_,_>(Equal.refl<Nat,0>),
//       succ: Either.right<_,_>(Nat.zero_not_succ(b.pred))
//       } : Either(0 == b, Not(0 == b)),
//     succ: case b {
//       zero: Either.right<_,_>(Nat.succ_not_zero(a.pred)),
//       succ: case Nat.equal(a.pred, b.pred) as rec {
//         left : Either.left<_,_>(Equal.apply<Nat, Nat, a.pred, b.pred, Nat.succ>(rec.value)),
//         right: Either.right<_,_>((eq) rec.value(Nat.succ_inj(a.pred, b.pred, eq)))
//       } : Either(Nat.succ(a.pred) == Nat.succ(b.pred), Not(Nat.succ(a.pred) == Nat.succ(b.pred)))
//     } : Either(Nat.succ(a.pred) == b, Not(Nat.succ(a.pred) == b))
//   } : Either(a == b, Not(a == b))

Nat.for<S: Type>(state: S, from: Nat, til: Nat, func: Nat -> S -> S): S
  if Nat.eql(from, til) then
    state
  else
    Nat.for<S>(func(from, state), Nat.succ(from), til, func)

Nat.half(n: Nat): Nat
  case n {
    zero: Nat.zero,
    succ: case n.pred {
      zero: Nat.zero,
      succ: Nat.succ(Nat.half(n.pred.pred))
    }
  }

Nat.induction(n: Nat): <P: Nat -> Type> -> (z: P(Nat.zero)) -> (s: ((m:Nat) -> P(m) -> P(Nat.succ(m)))) -> P(n)
  <P> (z) (s) n<P>(z, (pred) s(pred, Nat.induction(pred)<P>(z, s)))

Nat.min(a: Nat, b: Nat): Nat
  case a {
    zero: 0,
    succ: case b {
      zero: 0,
      succ: Nat.succ(Nat.min(a.pred, b.pred))
    }
  }

Nat.odd(n: Nat): Bool
  Nat.eql(Nat.mod(n, 2), 1)

Nat.square(a: Nat): Nat
  Nat.mul(a, a)

Nat.succ_inj(a: Nat, b: Nat, eq: Nat.succ(a) == Nat.succ(b)): a == b
  Equal.apply<Nat, Nat, Nat.succ(a), Nat.succ(b), Nat.pred>(eq)

Nat.sum(n: Nat): Nat
  Nat.sum.go(n, Nat.zero)

Nat.sum.go(n: Nat , r: Nat): Nat //loop//
  case n {
    zero: r,
    succ: Nat.sum.go(n.pred, Nat.add(n, r))
  }

// TODO
Nat.to_f64(s: Bool, a: Nat, b: Nat): F64
  Nat.to_f64(s, a, b)

Nat.to_string_unary(n: Nat): String
  case n {
    zero: String.nil,
    succ: String.cons('1', Nat.to_string_unary(n.pred))
  }

Nat.to_string(n: Nat): String
  case n {
    zero: String.cons(Char.parse("z"), String.nil),
    succ: String.cons(Char.parse("s"), Nat.to_string(n.pred))
  }

// Nat.succ_isnt_zero<n: Nat>: Not(Equal(Nat, Nat.succ(n), Nat.zero))
//   def P = (n : Nat)
//     case n {
//       zero: Empty
//       succ: Unit
//     }
//   def p_succ = 
//     Unit.new
//   (succ_is_zero)
//     Equal.rewrite<_,_,_,P>(succ_is_zero, p_succ)

// Nat.succ_not_zero(a: Nat): Not(Nat.succ(a) == 0)
//   (eq)
//   def P = (x) case x { zero: Empty, succ: Unit }
//   Equal.rewrite<Nat, Nat.succ(a), 0, P>(eq, Unit.new)

//TODO: error on misformatted Nat
// Nat.parse_decimal(str: String): Nat
//   Nat.parse_decimal.go(str, Nat.zero)

// Nat.parse_decimal.go(str: String, res: Nat): Nat
//   case str {
//     nil : res,
//     cons:
//       let dig = Nat.sub(U16.to_nat(str.head), 48)
//       let res = Nat.add(dig, Nat.mul(10, res))
//       Nat.parse_decimal.go(str.tail, res)
//   }

// Nat.parse_hex(str: String): Nat
//   Nat.parse_hex.go(str, Nat.zero)

// Nat.parse_hex.go(str: String, res: Nat): Nat
//   case str {
//     nil : res,
//     cons: 
//       let dig = Char.hex_value(str.head)
//       let res = Nat.add(dig, Nat.mul(16, res))
//       Nat.parse_hex.go(str.tail, res)
//   }

