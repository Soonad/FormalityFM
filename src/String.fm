type String {
  nil,
  cons(head: Char, tail: String),
}

// A string with only one character.
String.pure(x : Char) : String
  String.cons(x, String.nil)

String.is_empty(str: String): Bool
  case str {
    nil: Bool.true,
    cons: Bool.false,
  }

// Computes the length of the list.
String.length(xs: String): Nat
  String.length.go(xs, 0)

// Computes the length of the list.
String.length.go(xs: String, n: Nat): Nat
  case xs {
    nil : n,
    cons: String.length.go(xs.tail, Nat.succ(n))
  }

// Computes the length of the string as a U32.
String.length32(xs: String): U32
  String.length32.go(xs, U32.zero)

String.length32.go(xs: String, n: U32): U32
  case xs{
    nil : n
    cons: String.length32.go(xs.tail, U32.inc(n))
  }


String.concat(as: String, bs: String): String
  case as {
    nil: bs,
    cons: String.cons(as.head, String.concat(as.tail,bs)),
  }

String.eql(a: String, b: String): Bool
  case a {
    nil: case b {
      nil: Bool.true,
      cons: Bool.false,
    },
    cons: case b {
      nil: Bool.false,
      cons: Bool.and(U16.eql(a.head, b.head), String.eql(a.tail,b.tail)),
    },
  }

String.join.go(sep: String, list: List(String), fst: Bool): String
  case list {
    nil: "",
    cons: String.flatten([
      if fst then "" else sep,
      list.head, 
      String.join.go(sep, list.tail, Bool.false),
    ]),
  }
  
String.join(sep: String, list: List(String)): String
  String.join.go(sep, list, Bool.true)

String.flatten.go(xs: List(String), res: String): String
  case xs {
    nil: res,
    cons: String.flatten.go(xs.tail, String.concat(res, xs.head)),
  }

String.flatten(xs: List(String)): String
  String.flatten.go(xs, "")

// Reverse the order of the characters of the string
String.reverse(xs: String) : String
  String.reverse.go(xs,String.nil)

String.reverse.go(xs: String, res: String): String
  case xs {
    nil: res,
    cons: String.reverse.go(xs.tail,String.cons(xs.head,res)),
  }

String.pad_left(size: Nat, chr: Char, str: String): String
  String.reverse(String.pad_right(size, chr, String.reverse(str)))

String.pad_right(size: Nat, chr: Char, str: String): String
  case size {
    zero: str,
    succ: case str {
      nil: String.cons(chr, String.pad_right(size.pred, chr, "")),
      cons: String.cons(str.head, String.pad_right(size.pred, chr, str.tail)),
    }
  }

// Appends character to the end of the string.
String.append(as: String, a: Char): String
  case as{
    nil : String.pure(a)
    cons: String.cons(as.head,String.append(as.tail, a))
  }
  
// A string with only one character.
String.pure(x : Char) : String
  String.cons(x, String.nil)

// Check if "xs" starts with "match"
String.starts_with(xs: String, match: String): Bool
  case match{
    nil : Bool.true
    cons: case xs{
      nil : Bool.false
      cons: case Char.eql(match.head, xs.head){
        true : String.starts_with(xs.tail, match.tail)
        false: Bool.false
      }
    }
  }

// Check if a String ends with another String
String.ends_with(xs: String, match: String): Bool
  let xs_reserved = String.reverse(xs)
  let match_reversed = String.reverse(match)
  String.starts_with(xs_reserved, match_reversed)

// Removes all characters that do not satisfy a condition.
String.filter(f: Char -> Bool, xs: String): String
  case xs{
    nil : String.nil
    cons: case f(xs.head){
      true : String.cons(xs.head,String.filter(f, xs.tail))
      false: String.filter(f, xs.tail)
      }
  }

// Creates a String from a List(Char)
String.from_list(xs: List(Char)) : String
  case xs{
    nil : String.nil
    cons: String.cons(xs.head,String.from_list(xs.tail))
  }

// Get the head of a nonempty string
String.head(xs: String): Maybe(Char)
  case xs{
    nil : Maybe.none<_>
    cons: Maybe.some<_>(xs.head)
  }

// Check if "xs" includes "match"
String.includes(xs: String, match: String): Bool
  case String.starts_with(xs, match){
    true : Bool.true
    false: case String.includes.go(xs, match){
      nil : Bool.false
      cons: Bool.true
    }
  }

// Search for a Substring
// if finds it, returns the tail containg the "match" String
String.includes.go(xs: String, match: String): String
  case xs{
    nil : String.nil
    cons: case String.starts_with(xs.tail, match){
      true : xs.tail
      false: String.includes.go(xs.tail, match)
    }
  }

// Applies a function to all characters of the string.
String.map(f: Char -> Char, as: String): String
  case as{
    nil : String.nil
    cons: String.cons(f(as.head),String.map(f,as.tail))
  }

// A proposition that a string is not the empty string
String.not_empty(xs: String): Type
  case xs{
    nil : Empty
    cons: Unit
  }

String.null(xs: String): Bool
  case xs{
    nil : Bool.true
    cons: Bool.false
  }

// Remove "match" from the beginning of "xs"
String.remove_start_with(xs: String, match: String): String
  case xs{
    nil : String.nil
    cons: case String.starts_with(xs, match){
      true : String.remove_start_with.go(xs, match)
      false: xs
    }
  }

// Removes "match" from the beginning of the String and returns the tail
String.remove_start_with.go(xs: String, match: String): String
  case match{
    nil : xs
    cons: case xs{
      nil : String.nil //xs < match
      cons: case Char.eql(match.head, xs.head){
        true : String.remove_start_with.go(xs.tail, match.tail)
        false: xs.tail
      }
    }
  }

// Repeats a String for "n" times
String.repeat(xs: String, n: Nat): String
  case n{
    zero: String.nil
    succ: String.concat(xs, String.repeat(xs, n.pred))
  }

// Returns the first characters of a string, discards the rest.
String.take(n: Nat, xs: String): String
  case xs{
    nil : String.nil
    cons: case n{
      zero : String.nil
      succ: String.cons(xs.head,String.take(n.pred, xs.tail))
    }
  }

// Removes the first characters of a string.
String.drop(n: Nat, xs: String):  String
  case n{
  zero: xs
  succ: case xs{
      nil : String.nil
      cons: String.drop(n.pred,xs.tail)
    }
  }

// Get a substring from index i to j
String.slice(i: Nat, j: Nat, xs: String): String
  String.take(Nat.sub(j, i), String.drop(i, xs))

// Splits a String given a separator ("match")
String.split(xs: String, match: String): List(String)
  case xs{
    nil : List.nil<_>
    cons: case String.starts_with(xs, match){
      true: case match{
        nil : List.cons<String>(String.cons(xs.head, String.nil), String.split(xs.tail, match))
        cons: List.cons<String>("", String.split(String.drop(String.length(match), xs), match))
      }
      false:
        case String.split(xs.tail, match) as split{
          nil : List.nil<_>  // FIXME: mark this impossible
          cons: List.cons<_>(String.cons(xs.head, split.head),  split.tail)
        }
    }
  }

String.split_at(n : Nat, xs: String) : Pair(String,String)
  Pair.new<_,_>(String.take(n,xs),String.drop(n,xs))

// String.to_bits(str: String): Bits
//   case str{
//     nil : Bits.e
//     cons: Bits.concat(U16.to_bits(str.head))(String.to_bits(str.tail))
//   }

// insert separators between characters, i.e. `[A,B,C] ~> [A,sep,B,sep,C]`
String.intercalate(sep: String, xs: List(String)): String
  String.flatten(List.intersperse<_>(sep,xs))

// insert separators between characters, i.e. `[A,B,C] ~> [A,sep,B,sep,C]`
String.intersperse(sep: Char, xs: String): String
  case xs{
  nil : String.nil
  cons: case xs.tail{
    nil : String.pure(xs.head)
    cons: String.cons(xs.head,String.cons(sep,String.intersperse(sep,xs.tail)))
    }
  }

// Converts a String to Bits
String.to_bits(str: String): Bits
  case str {
    nil : Bits.e,
    cons: case U16.eql(str.head, '1') {
      true : Bits.i(String.to_bits(str.tail)),
      false: Bits.o(String.to_bits(str.tail)),
    }
  }

// Print a string
String.show(xs: String): String
  String.flatten(["\"",xs,"\""])

// Get the all characters of a nonempty string except the last one
// String.init(xs: String, not_empty: String.not_empty(xs)) : String
//   case xs{
//     with ne : String.not_empty(xs.self) = not_empty;
//     nil : Empty.absurd<>(ne);
//     cons: case xs.tail{
//       with e : Equal(_, xs.tail.self,xs.tail) = Equal.to<String,xs.tail>;
//       nil : String.nil
//       cons: def cne = String.cons_isnt_empty(xs.tail.head,xs.tail.tail)
//         def xne = Equal.rewrite<_,_,_,(x) String.not_empty(x)>(e,cne)
//         String.cons(xs.head,String.init(xs.tail,xne))
//     }
//   }

// Folds over a string, right associative
String.fold(xs: String) : <P: Type> -> P -> (Char -> P -> P) -> P
  <P> (nil, cons)
  case xs{
    nil : nil
    cons: cons(xs.head, String.fold(xs.tail)<P>(nil, cons))
  }

// Map over a string with the index
String.imap(f: Nat -> Char -> Char, xs: String): String
  case xs{
    nil : String.nil
    cons: String.cons(f(0,xs.head),String.imap((n) f(Nat.succ(n)),xs.tail))
  }

// Get the last character of a nonempty string
// String.last(xs: String, not_empty: String.not_empty(xs)) : Char
//   case xs{
//     with ne : String.not_empty(xs.self) = not_empty;
//     nil : Empty.absurd<>(ne);
//     cons: case xs.tail{
//       with e : Equal(_, xs.tail.self,xs.tail) = Equal.to<String,xs.tail>;
//         nil : xs.head
//         cons: def cne = String.cons_isnt_empty(xs.tail.head,xs.tail.tail)
//           def xne = Equal.rewrite<_,_,_,(x) String.not_empty(x)>(e,cne)
//           String.last(xs.tail,xne)
//       }
//   }

// A lazy String constructor, useful for efficient concatenation
String.Builder: Type
  String -> String

// concatenate two string builders
String.Builder.concat(a: String.Builder, b: String.Builder): String.Builder
   (x) a(b(x))

// turn a builder into a String
String.run_builder(lb: String.Builder): String
  lb(String.nil)

String.span(f: Char -> Bool, xs: String): Pair(String,String)
  case xs{
    nil : Pair.new<_,_>(String.nil,String.nil)
    cons: case f(xs.head){
        true :
          open String.span(f,xs.tail) as span 
          let y = span.fst
          let z = span.snd
          Pair.new<_,_>(String.cons(xs.head,y),z)
        false: Pair.new<_,_>(String.nil,xs)
      }
  }

// Get the tail of a nonempty string
// String.tail(xs: String, not_empty: String.not_empty(xs)) : String
//   case xs{
//     with ne : String.not_empty(xs.self) = not_empty;
//     nil : Empty.absurd<>(ne)
//     cons: xs.tail
//   }

// String.take_n.aux(n: Nat, str: String, res: String): Maybe(Pair(String, String))
//   case res{
//     nil : case n{
//         zero: Maybe.some<_>(Pair.new<_,_>(str, String.nil))
//         succ: Maybe.none<Pair(String, String)>
//       }
//     cons: case n{
//         zero: Maybe.some<_>(Pair.new<String, String>(str, res))
//         cons: String.take_n.aux(n.pred, String.cons(res.head, str), res.tail)
//       }
//   }
//String.take_n.aux(n: Nat, str: String, res: String): Maybe(Pair(String, String))
  //case res:
  //| case n:
    //| Maybe.some<>(Pair.new<,>(str, String.nil));
    //| Maybe.none<Pair(String, String)>;;
  //| case n:
    //| Maybe.some<>(Pair.new<String, String>(str, res));
    //| String.take_n.aux(n.pred, String.cons(res.head, str), res.tail);;

// Get the tail of a nonempty string
// String.tail(xs: String, not_empty: String.not_empty(xs)) : String
//   case xs{
//     with ne : String.not_empty(xs) = not_empty
//     nil : Empty.absurd<_>(ne)
//     cons: xs.tail
//   }

String.to_bits(str: String): Bits
  case str{
    nil : Bits.e
    cons: Bits.concat(U16.to_bits(str.head), String.to_bits(str.tail))
  }

// convert a string to a builder
String.to_builder(string: String) : String.Builder
  String.to_builder.go(string, String.Builder.new)

String.to_builder.go(string: String, lb: String.Builder) : String.Builder
  case string{
    nil : lb
    cons: String.to_builder.go(string.tail, String.Builder.snoc(string.head, lb))
  }

// A lazy String constructor, useful for efficient concatenation
String.Builder: Type
  String -> String

// construct a new builder (it's just the identity function)
String.Builder.new : String.Builder
  (x) x

// append a character
String.Builder.snoc(c: Char, lb: String.Builder) : String.Builder
  (x) lb(String.cons(c,x))

String.to_list(str: String): List(Char)
  case str{
    nil : List.nil<_>
    cons: List.cons<_>(str.head, String.to_list(str.tail))
  }

