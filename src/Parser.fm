type Parser.Reply <V: Type> {
  error(idx: Nat, code: String, err: String),
  value(idx: Nat, code: String, val: V),
}

// A parser is a function that receives a string and returns a reply
Parser(V: Type): Type
  Nat -> String -> Parser.Reply(V)

type Parser.ErrorAt {
  new(idx: Nat, code: String, err: String)
}

// Parser monadic binder
Parser.bind<A: Type, B: Type>(parse: Parser(A), next: A -> Parser(B)): Parser(B)
  (idx,code) case parse(idx,code) as reply {
    error: Parser.Reply.error<B>(reply.idx, reply.code, reply.err),
    value: next(reply.val, reply.idx, reply.code),
  }

// Parser monadic injection
Parser.pure<V: Type>(value: V): Parser(V)
  (idx,code) Parser.Reply.value<V>(idx, code, value)

// Perser monad
Parser.monad: Monad(Parser)
  Monad.new<Parser>(Parser.bind, Parser.pure)

// Throws an error
Parser.fail<V: Type>(error: String): Parser(V)
  (idx,code) Parser.Reply.error<V>(idx, code, error)

// Consumes a specific text, returns the remaining code
Parser.text.go(text: String): Parser(Unit)
  (idx,code) 
  case text {
    nil:
      Parser.Reply.value<Unit>(idx, code, Unit.new),
    cons: case code {
      nil:
        let error = String.flatten(["Expected '", text, "', found end of file."]);
        Parser.Reply.error<Unit>(idx, code, error)
      cons:
        if U16.eql(text.head, code.head) then
          Parser.text(text.tail, Nat.succ(idx), code.tail)
        else
          let error = String.flatten(["Expected '", text, "', found '", String.cons(code.head, String.nil), "'."]);
          Parser.Reply.error<Unit>(idx, code, error)
    }
  }

Parser.text(text: String): Parser(Unit)
  (idx,code) case Parser.text.go(text, idx,code) as reply {
    error: Parser.Reply.error<Unit>(idx, code, reply.err),
    value: Parser.Reply.value<Unit>(reply.idx, reply.code, reply.val),
  }

Parser.one: Parser(Char)
  (idx,code) case code {
    nil: Parser.Reply.error<Char>(idx, code, "Unexpected end of file."),
    cons: Parser.Reply.value<Char>(Nat.succ(idx), code.tail, code.head),
  }
  
Parser.if_not<A: Type>(a: Parser(Unit), b: Parser(A)): Parser(A)
  (idx,code) case a(idx,code) {
    error: b(idx,code),
    value: Parser.Reply.error<A>(idx, code, "Prevented."),
  }

// Repeats a parse until it fails, returns a list of results
Parser.many<V: Type>(parser: Parser(V)): Parser(List(V))
  Parser.many.go<V>(parser, (x) x)

Parser.many.go<V: Type>(parse: Parser(V), values: List(V) -> List(V), idx: Nat, code: String): Parser.Reply(List(V))
  case parse(idx,code) as reply {
    error: Parser.Reply.value<List(V)>(idx, code, values([])),
    value: Parser.many.go<V>(parse, (xs) values(List.cons<_>(reply.val, xs)), reply.idx, reply.code),
  }

// Same as Parser.many, but parses at least one instance
Parser.many1<V: Type>(parser: Parser(V)): Parser(List(V))
  do Parser {
    var head = parser;
    var tail = Parser.many<V>(parser);
    return List.cons<V>(head, tail);
  }

// Repeats a parse until it finds a delimiter. Better errors than Parser.many
Parser.until<V: Type>(until: Parser(Unit), parse: Parser(V)): Parser(List(V))
  Parser.until.go<V>(until, parse, (x) x)

Parser.until.go<V: Type>(
  until: Parser(Unit),
  parse: Parser(V),
  values: List(V) -> List(V),
  idx: Nat,
  code: String
): Parser.Reply(List(V))
  let until_reply = until(idx,code);
  case until_reply {
    error:
      let reply = parse(idx,code);
      case reply {
        error:
          Parser.Reply.error<List(V)>(reply.idx, reply.code, reply.err),
        value:
          def values = (xs) values(List.cons<V>(reply.val, xs));
          Parser.until.go<V>(until, parse, values, reply.idx, reply.code)
      }
    value:
      Parser.Reply.value<List(V)>(until_reply.idx, until_reply.code, values([])),
  }

// Same as Parser.many, but parses at least one instance
Parser.until1<V: Type>(cond: Parser(Unit), parser: Parser(V)): Parser(List(V))
  do Parser {
    var head = parser;
    var tail = Parser.until<V>(cond, parser);
    return List.cons<V>(head, tail);
  }

// Parses an optional
Parser.maybe<V: Type>(parse: Parser(V)): Parser(Maybe(V))
  (idx,code) case parse(idx,code) as reply {
    error: Parser.Reply.value<Maybe(V)>(idx, code, Maybe.none<V>)
    value: Parser.Reply.value<Maybe(V)>(reply.idx, reply.code, Maybe.some<V>(reply.val))
  }

Parser.ErrorAt.combine(
  a: Maybe(Parser.ErrorAt),
  b: Maybe(Parser.ErrorAt),
): Maybe(Parser.ErrorAt)
  case a {
    none: b,
    some: case b {
      none: a,
      some: open a.value
        open b.value
        if Nat.gtn(a.value.idx, b.value.idx) then a else b
    }
  }

// Parses the first in a list
Parser.first_of.go<A: Type>(pars: List(Parser(A)), err: Maybe(Parser.ErrorAt)): Parser(A)
  (idx,code) 
    case pars {
      nil: case err {
        none: Parser.Reply.error<_>(idx, code, "No parse.")
        some: open err.value
          Parser.Reply.error<_>(err.value.idx, err.value.code, err.value.err)
      },
      cons:
        let parsed = pars.head(idx, code);
        case parsed {
          error:
            let neo = Maybe.some<_>(Parser.ErrorAt.new(parsed.idx, parsed.code, parsed.err));
            let err = Parser.ErrorAt.combine(neo, err);
            Parser.first_of.go<_>(pars.tail, err, idx, code),
          value:
            Parser.Reply.value<_>(parsed.idx, parsed.code, parsed.val),
        }
    }

Parser.first_of<A: Type>(pars: List(Parser(A))): Parser(A)
  Parser.first_of.go<A>(pars, Maybe.none<_>)

// Skips whitespaces
Parser.spaces: Parser(List(Unit))
  Parser.many<_>(Parser.first_of<_>([
    Parser.text(" "),
    Parser.text("\n"),
  ]))

// Checks if it is the end of the file
Parser.is_eof: Parser(Bool)
  (idx,code) case code {
    nil: Parser.Reply.value<_>(idx, code, Bool.true),
    cons: Parser.Reply.value<_>(idx, code, Bool.false),
  }

// Parses end of file
Parser.eof: Parser(Unit)
  (idx,code) case code {
    nil: Parser.Reply.value<_>(idx, code, Unit.new),
    cons: Parser.Reply.error<_>(idx, code, "Expected end-of-file."),
  }

// Parses spaces then a text
Parser.spaces_text(text: String): Parser(Unit)
  do Parser {
    Parser.spaces;
    Parser.text(text);
  }

// Parses a character
Parser.char_if(fun: Char -> Bool): Parser(Char)
  (idx,code) case code {
    nil: Parser.Reply.error<_>(idx, code, "No parse."),
    cons:
      if fun(code.head) then
        Parser.Reply.value<_>(Nat.succ(idx), code.tail, code.head)
      else
        Parser.Reply.error<_>(idx, code, "No parse."),
  }

// Parses a digit: [0123456789]
Parser.digit: Parser(Nat)
  (idx, code) case code {
    nil:
      Parser.Reply.error<_>(idx, code, "Not a digit."),
    cons:
      let sidx = Nat.succ(idx);
      if      U16.eql(code.head, '0') then Parser.Reply.value<_>(sidx, code.tail, 0)
      else if U16.eql(code.head, '1') then Parser.Reply.value<_>(sidx, code.tail, 1)
      else if U16.eql(code.head, '2') then Parser.Reply.value<_>(sidx, code.tail, 2)
      else if U16.eql(code.head, '3') then Parser.Reply.value<_>(sidx, code.tail, 3)
      else if U16.eql(code.head, '4') then Parser.Reply.value<_>(sidx, code.tail, 4)
      else if U16.eql(code.head, '5') then Parser.Reply.value<_>(sidx, code.tail, 5)
      else if U16.eql(code.head, '6') then Parser.Reply.value<_>(sidx, code.tail, 6)
      else if U16.eql(code.head, '7') then Parser.Reply.value<_>(sidx, code.tail, 7)
      else if U16.eql(code.head, '8') then Parser.Reply.value<_>(sidx, code.tail, 8)
      else if U16.eql(code.head, '9') then Parser.Reply.value<_>(sidx, code.tail, 9)
      else Parser.Reply.error<_>(idx, code, "Not a digit."),
  }

// Parses a natural number: 123
Parser.nat: Parser(Nat)
  do Parser {
    var digits = Parser.many1<Nat>(Parser.digit);
    return Nat.from_base(10, digits);
  }

// Gets the current code
Parser.get_code: Parser(String)
  (idx, code) Parser.Reply.value<_>(idx, code, code)

// Gets the current index
Parser.get_index: Parser(Nat)
  (idx, code) Parser.Reply.value<_>(idx, code, idx)

// Sets the current index
Parser.set_index(new_idx: Nat): Parser(Unit)
  (idx, code) Parser.Reply.value<_>(new_idx, code, Unit.new)

// Gets the current code
Parser.log_code: Parser(Unit)
  (idx, code) Debug.log<_>(code, (x) Parser.Reply.value<_>(idx, code, Unit.new))

// Parses something
Parser.log(str: String): Parser(Unit)
  (idx, code) Debug.log<_>(str, (x) Parser.Reply.value<_>(idx, code, Unit.new))

