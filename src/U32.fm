type U32 {
  new(value: Word(32))
}

// 0
U32.zero: U32
  U32.new(Word.zero(32))

U32.add(a: U32, b: U32): U32
  open a
  open b
  U32.new(Word.add<_>(a.value, b.value))

U32.and(a: U32, b: U32): U32
  open a
  open b
  U32.new(Word.and<_>(a.value, b.value))

// U32.concat(a: U32, b: U32): U64
//   open a
//   open b
//   U64.new(Word.concat<_,_>(a.value, b.value))

// a / b
U32.div(a: U32, b: U32): U32
  open a
  open b
  U32.new(Word.div<_>(a.value, b.value))

// a == b
U32.eql(a: U32, b: U32): Bool
  open a
  open b
  Word.eql<_>(a.value, b.value)

U32.for<S: Type>(state: S, from: U32, til: U32, func: U32 -> S -> S): S
  case U32.eql(from, til){
    true : state
    false: U32.for<S>(func(from, state), U32.inc(from), til, func)
  }

// a >= b
U32.gte(a: U32, b: U32): Bool
  open a
  open b
  Word.gte<_>(a.value, b.value)

// a > b
U32.gtn(a: U32, b: U32): Bool
  open a
  open b
  Word.gtn<_>(a.value, b.value)

U32.inc(a: U32): U32
  open a
  U32.new(Word.inc<_>(a.value))

U32.length(str: String): U32
  U32.length(str)

// a <= b
U32.lte(a: U32, b: U32): Bool
  open a
  open b
  Word.lte<_>(a.value, b.value)

// a < b
U32.ltn(a: U32, b: U32): Bool
  open a
  open b
  Word.ltn<_>(a.value, b.value)

// a % b
U32.mod(a: U32, b: U32): U32
  open a
  open b
  U32.new(Word.mod<_>(a.value, b.value))

// a * b
U32.mul(a: U32, b: U32): U32
  open a
  open b
  U32.new(Word.mul<_>(a.value, b.value))

// U32.needed_depth(size: U32): Nat
//   U32.needed_depth.go(U32.sub(size, 1u))

// U32.needed_depth.go(n: U32): Nat
//   case U32.eql(n, 0u){
//     true : 0
//     false: Nat.succ(U32.needed_depth.go(U32.shr(n,1u)))
//   }

U32.or(a: U32, b: U32): U32
  open a
  open b
  U32.new(Word.or<_>(a.value, b.value))

// U32.parse_hex(str: String): U32
//   U32.new(Word.from_bits(32, Bits.parse_hex(str)))

// U32.percent(p: U32, t: U32): U32
//   U32.div(U32.mul(p, t), 100u)

U32.pow(a: U32, b: U32): U32
  open a
  open b
  U32.new(Word.pow<_>(a.value, b.value))

// U32.read_base(base: U32, str: String): U32
//   U32.read_base(base, str)

// TODO
U32.shl(n: U32, a: U32): U32
  U32.shl(n, a)

// TODO
U32.shr(n: U32, a: U32): U32
  U32.shr(n, a)

// TODO
U32.slice(i: U32, j: U32, str: String): String
  U32.slice(i, j, str)

U32.sub(a: U32, b: U32): U32
  open a
  open b
  U32.new(Word.sub<_>(a.value, b.value))

U32.to_bits(a: U32): Bits
  open a
  Word.to_bits<_>(a.value)

U32.to_f64(a: U32): F64
  U32.to_f64(a)

// U32.to_nat(a: U32): Nat
//   open a 
//   Word.to_nat<_>(a.value)
 
// TODO: optimize
// U32.to_string(n: U32): String
//   Nat.to_string_base(10, U32.to_nat(n))

U32.xor(a: U32, b: U32): U32
  open a
  open b
  U32.new(Word.xor<_>(a.value, b.value))

