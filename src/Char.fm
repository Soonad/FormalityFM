Char: Type
  U16

Char.new(
  b0: Bit, b1: Bit, b2: Bit, b3: Bit,
  b4: Bit, b5: Bit, b6: Bit, b7: Bit,
  b8: Bit, b9: Bit, bA: Bit, bB: Bit,
  bC: Bit, bD: Bit, bE: Bit, bF: Bit,
): U16
  let kF = b0<(x) Word( 0) -> Word( 1)>(Word.o<_>, Word.i<_>);
  let kE = b1<(x) Word( 1) -> Word( 2)>(Word.o<_>, Word.i<_>);
  let kD = b2<(x) Word( 2) -> Word( 3)>(Word.o<_>, Word.i<_>);
  let kC = b3<(x) Word( 3) -> Word( 4)>(Word.o<_>, Word.i<_>);
  let kB = b4<(x) Word( 4) -> Word( 5)>(Word.o<_>, Word.i<_>);
  let kA = b5<(x) Word( 5) -> Word( 6)>(Word.o<_>, Word.i<_>);
  let k9 = b6<(x) Word( 6) -> Word( 7)>(Word.o<_>, Word.i<_>);
  let k8 = b7<(x) Word( 7) -> Word( 8)>(Word.o<_>, Word.i<_>);
  let k7 = b8<(x) Word( 8) -> Word( 9)>(Word.o<_>, Word.i<_>);
  let k6 = b9<(x) Word( 9) -> Word(10)>(Word.o<_>, Word.i<_>);
  let k5 = bA<(x) Word(10) -> Word(11)>(Word.o<_>, Word.i<_>);
  let k4 = bB<(x) Word(11) -> Word(12)>(Word.o<_>, Word.i<_>);
  let k3 = bC<(x) Word(12) -> Word(13)>(Word.o<_>, Word.i<_>);
  let k2 = bD<(x) Word(13) -> Word(14)>(Word.o<_>, Word.i<_>);
  let k1 = bE<(x) Word(14) -> Word(15)>(Word.o<_>, Word.i<_>);
  let k0 = bF<(x) Word(15) -> Word(16)>(Word.o<_>, Word.i<_>);
  let kx = Word.e;
  U16.new(k0(k1(k2(k3(k4(k5(k6(k7(k8(k9(kA(kB(kC(kD(kE(kF(kx)))))))))))))))))

Char.eql(a: Char, b: Char): Bool
  U16.eql(a, b)

// Char.hex_value(chr: Char): Nat
//   U32.to_nat(Char.hex_value32(chr))

// Receives a hex char (0-9, a-f, A-F) and returns its value.
Char.hex_value16(chr: Char): U16
  def U16.add10 = ((x0)
    def x1 = U16.inc(U16.inc(U16.inc(U16.inc(U16.inc(x0)))))
    def x2 = U16.inc(U16.inc(U16.inc(U16.inc(U16.inc(x1)))))
    x2) :: U16 -> U16
  if Bool.and(U16.gte(chr,'0'),U16.lte(chr,'9')) then
    U16.sub(chr,'0')
  else if Bool.and(U16.gte(chr,'a'),U16.lte(chr,'f')) then
    U16.add10(U16.sub(chr,'a'))
  else if Bool.and(U16.gte(chr,'A'),U16.lte(chr,'F')) then
    U16.add10(U16.sub(chr,'A'))
  else
    U16.zero

Char.hex_value32(chr: Char): U32
  U16.to_u32(Char.hex_value16(chr))


Char.newline: Char
  Char.new(
    Bit.o, Bit.o, Bit.o, Bit.o,
    Bit.o, Bit.o, Bit.o, Bit.o,
    Bit.o, Bit.o, Bit.o, Bit.o,
    Bit.i, Bit.o, Bit.i, Bit.o)

// Parses a character. Example: `Char.parse("x")`
Char.parse(str: String): Char.parse.type(str)
  case str {
    nil : Unit.new,
    cons: str.head
  } : Char.parse.type(str)

Char.parse.type(str: String): Type
  case str {
    nil : Unit,
    cons: Char
  }

// TODO: not recognizing `s`
// Char.to_lower(char: U16): U16
//   case Bool.and(U16.gte(char, 'A'), U16.lte(char, 'Z'))
//     U16.add(char, 32s)
//   else
//     char

// Char.to_upper(char: U16): U16
//   if Bool.and(U16.gte(char, 'a'), U16.lte(char, 'z')) then
//     U16.sub(char, 32s)
//   else
//     char

Char.newline: Char
  Char.new(
    Bit.o, Bit.o, Bit.o, Bit.o,
    Bit.o, Bit.o, Bit.o, Bit.o,
    Bit.o, Bit.o, Bit.o, Bit.o,
    Bit.i, Bit.o, Bit.i, Bit.o)
   