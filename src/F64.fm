// An IEEE-754 compliant 64-bit floating point.
type F64 {
  new(word: Word(64))
}

type F64.Boundary {
  new(pts: List(F64.V3))
}

type F64.Circle {
  new(pos: F64.V3, rad: F64)
}

type F64.Line {
  new(pos: F64.V3, dir: F64.V3)
}

type F64.Ordering {
  LT,
  EQ,
  GT
}

type F64.Segment {
  new(a: F64.V3, b: F64.V3)
}

type F64.V3 {
  new(x: F64, y: F64, z: F64)
}

F64.parse_binary(str: String): F64
  F64.new(Word.from_bits(64, String.to_bits(str)))

F64.0 : F64
  F64.parse_binary("0000000000000000000000000000000000000000000000000000000000000000")

F64.1 : F64
  F64.parse_binary("0000000000000000000000000000000000000000000000000000111111111100")

F64.180 : F64
  F64.parse_binary("0000000000000000000000000000000000000000000000010110011000000010")

F64.2 : F64
  F64.parse_binary("0000000000000000000000000000000000000000000000000000000000000010")

F64.256 : F64
  F64.parse_binary("0000000000000000000000000000000000000000000000000000111000000010")

F64.V3.add(a: F64.V3, b: F64.V3): F64.V3 
  open a
  open b
  let c.x = F64.add(a.x, a.x)
  let c.y = F64.add(a.y, b.y)
  let c.z = F64.add(a.z, b.z)
  F64.V3.new(c.x, c.y, c.z)

F64.V3.circle_boundary_intersects(c: F64.Circle, b: F64.Boundary): F64
  open c
  open b
  case b.pts {
   nil: F64.0,
   cons:
    let h0 = b.pts.head
    let t0 = b.pts.tail
    case t0 {
     nil: F64.0,
     cons:
      let h1 = t0.head
      let t1 = t0.tail
      let p0 = h0
      let p1 = h1 
      let sg = F64.Segment.new(p0, p1)
      let cd = F64.V3.point_segment_sqrdist(c.pos, sg)
      let test = F64.ltn(cd, F64.mul(cd, cd))
      case test {
       true: F64.1,
       false:
        let boun = F64.Boundary.new(List.cons<F64.V3>(h1, t1))
        F64.V3.circle_boundary_intersects(c, boun)
      }
    }
  }

F64.V3.dist(a: F64.V3, b: F64.V3): F64
  F64.sqrt(F64.V3.sqr_dist(a, b))

F64.V3.dot(a: F64.V3, b: F64.V3): F64
  open a
  open b
  let res = F64.0
  let res = F64.add(res, F64.mul(a.x, b.x))
  let res = F64.add(res, F64.mul(a.y, b.y))
  let res = F64.add(res, F64.mul(a.z, b.z))
  res

F64.V3.eql(a: F64.V3, b: F64.V3): Bool
  open a
  open b
  let same_x = F64.eql(a.x, b.x)
  let same_y = F64.eql(a.y, b.y)
  let same_z = F64.eql(a.z, b.z)
  Bool.and(same_x, Bool.and(same_y, same_z))

F64.V3.get_x(v: F64.V3): F64
  open v 
  v.x

F64.V3.get_y(v: F64.V3): F64
  open v 
  v.y

F64.V3.get_z(v: F64.V3): F64
  open v 
  v.z

F64.V3.len(v: F64.V3): F64
  open v 
  let sqr  = F64.0
  let sqr  = F64.add(sqr, F64.mul(v.x, v.x))
  let sqr  = F64.add(sqr, F64.mul(v.y, v.y))
  let sqr  = F64.add(sqr, F64.mul(v.z, v.z))
  let expo = F64.div(F64.1, F64.add(F64.1, F64.1))
  let sqr  = F64.pow(sqr, expo)
  sqr

F64.V3.look_at(a: F64.V3, b: F64.V3, c: F64.V3): F64.V3 
  open a 
  open b 
  open c 
  let a_eql_b  = F64.V3.eql(a, b)
  let diff     = F64.V3.sub(b, a)
  let normdiff = F64.V3.norm(diff)
  case a_eql_b {
    true : normdiff,
    false: c
  }

// Return true if "a" is less than "b"
F64.V3.ltn(a: F64.V3, b: F64.V3): Bool
  let len_a = F64.V3.len(a)
  let len_b = F64.V3.len(b)
  F64.ltn(len_a, len_b)

F64.V3.map(fn: F64 -> F64, v: F64.V3): F64.V3
  open v 
  F64.V3.new(fn(v.x), fn(v.y), fn(v.z))

F64.V3.map_x(fn: F64 -> F64, v: F64.V3): F64.V3
  open v 
  F64.V3.new(fn(v.x), v.y, v.z)

F64.V3.map_y(fn: F64 -> F64, v: F64.V3): F64.V3
  open v 
  F64.V3.new(v.x, fn(v.y), v.z)

F64.V3.map_z(fn: F64 -> F64, v: F64.V3): F64.V3
  open v 
  F64.V3.new(v.x, v.y, fn(v.z))

F64.V3.mul(a: F64.V3, b: F64.V3): F64.V3
  open a
  open b
  let c.x = F64.mul(a.x, a.x)
  let c.y = F64.mul(a.y, b.y)
  let c.z = F64.mul(a.z, b.z)
  F64.V3.new(c.x, c.y, c.z)

F64.V3.norm(v: F64.V3): F64.V3
  open v
  let len = F64.V3.len(v)
  let new_x = F64.div(v.x, len)
  let new_y = F64.div(v.y, len)
  let new_z = F64.div(v.z, len)
  F64.V3.new(new_x, new_y, new_z)

F64.V3.point_segment_dist(p: F64.V3, s: F64.Segment): F64
  F64.sqrt(F64.V3.point_segment_sqrdist(p, s))

// Squared distance between a point and a segment
F64.V3.point_segment_sqrdist(p: F64.V3, s: F64.Segment): F64
  open p
  open s
  open s.a
  open s.b
  let ab_x_diff_sqrd = F64.pow(F64.sub(s.a.x, s.b.x), F64.2) 
  let ab_y_diff_sqrd = F64.pow(F64.sub(s.a.y, s.b.y), F64.2)
  let pa_x_diff = F64.sub(p.x, s.a.x)
  let pa_y_diff = F64.sub(p.y, s.a.y)
  let ba_x_diff = F64.sub(s.b.x, s.a.x)
  let ba_y_diff = F64.sub(s.b.y, s.a.y)
  let l = F64.add(ab_x_diff_sqrd, ab_y_diff_sqrd)
  let t = F64.add(F64.mul(pa_x_diff, ba_x_diff), F64.mul(pa_y_diff, ba_y_diff))
  let t = F64.div(t, l)
  let t = F64.max(F64.0, F64.min(F64.1, t))
  let d = F64.0
  let t_times_ba_x_diff = F64.mul(t, ba_x_diff)
  let t_times_ba_y_diff = F64.mul(t, ba_y_diff)
  let k = F64.pow(F64.sub(p.x, F64.add(s.a.x, t_times_ba_x_diff)), F64.2)
  let d = F64.add(d, k)
  let k = F64.pow(F64.sub(p.y, F64.add(s.a.y, t_times_ba_y_diff)), F64.2)
  let d = F64.add(d, k)
  d

F64.V3.polygon_to_segments.cons(
  pos: F64.V3,
  dir: F64.V3,
  pt_b: F64.V3,
  segs: (Maybe(F64.V3) -> Maybe(F64.V3) -> List(F64.Segment)),
  pt_a: Maybe(F64.V3),
  pt_0: Maybe(F64.V3)):
  List(F64.Segment)
  case pt_a {
   none: segs(Maybe.some<F64.V3>(pt_b), Maybe.some<F64.V3>(pt_b)),
   some:
    let pt_0 = case pt_0 {
      none: Maybe.some<F64.V3>(pt_b),
      some: pt_0
    }
    let p0 = F64.V3.polygon_to_segments.transform(pos, dir, pt_a.value)
    let p1 = F64.V3.polygon_to_segments.transform(pos, dir, pt_b)
    let sg = F64.Segment.new(p0, p1)
    List.cons<F64.Segment>(sg, segs(Maybe.some<F64.V3>(pt_b), pt_0))
  }

F64.V3.polygon_to_segments(
  pos: F64.V3,
  dir: F64.V3,
  pts: List(F64.V3)):
  List(F64.Segment)
  List.foldr<F64.V3><Maybe(F64.V3) -> Maybe(F64.V3) -> List(F64.Segment)>(
    F64.V3.polygon_to_segments.nil(pos, dir),
    F64.V3.polygon_to_segments.cons(pos, dir),
    pts,
    Maybe.none<F64.V3>,
    Maybe.none<F64.V3>
  )

F64.V3.polygon_to_segments.nil(
  pos: F64.V3,
  dir: F64.V3,
  pt_a: Maybe(F64.V3),
  pt_0: Maybe(F64.V3)):
  List(F64.Segment)
  case pt_0 {
   none: List.nil<F64.Segment>,
   some: case pt_a {
     none: List.nil<F64.Segment>,
     some: 
      let p0 = F64.V3.polygon_to_segments.transform(pos, dir, pt_a.value)
      let p1 = F64.V3.polygon_to_segments.transform(pos, dir, pt_0.value)
      let sg = F64.Segment.new(p0, p1)
      List.cons<F64.Segment>(sg, List.nil<F64.Segment>)
    }
  }

F64.V3.polygon_to_segments.transform(pos: F64.V3, dir: F64.V3, pnt: F64.V3): F64.V3
  open pnt
  open dir
  let a = F64.atan(dir.y, dir.x)
  let pnt_x_times_cos_a = F64.mul(pnt.x, F64.cos(a))
  let pnt_y_times_sin_a = F64.mul(pnt.y, F64.sin(a))
  let pnt_x_times_sin_a = F64.mul(pnt.x, F64.sin(a))
  let pnt_y_times_cos_a = F64.mul(pnt.y, F64.cos(a))
  let x = F64.sub(pnt_x_times_cos_a, pnt_y_times_sin_a)
  let y = F64.add(pnt_x_times_sin_a, pnt_y_times_cos_a)
  F64.V3.add(pos, F64.V3.new(x, y, pnt.z))

F64.V3.rot_90(v: F64.V3): F64.V3
  open v
  F64.V3.new(v.y, F64.sub(F64.0, v.x), v.z)

// Rotates a vector on the x-y plane around an arbitrary point
F64.V3.rotate(a: F64, v: F64.V3, p: F64.V3): F64.V3
  open v
  open p
  let rad = F64.mul(a, F64.div(F64.pi, F64.180))
  let sin = F64.sin(rad)
  let cos = F64.cos(rad)
  let x_diff = F64.sub(v.x, p.x)
  let y_diff = F64.sub(v.y, p.y)
  let x_diff_times_cos = F64.mul(x_diff, cos)
  let x_diff_times_sin = F64.mul(x_diff, sin)
  let y_diff_times_cos = F64.mul(y_diff, cos)
  let y_diff_times_sin = F64.mul(y_diff, sin)
  let new_x = F64.sub(F64.add(p.x, x_diff_times_cos), y_diff_times_sin)
  let new_y = F64.add(F64.add(p.y, x_diff_times_sin), y_diff_times_cos)
  F64.V3.new(new_x, new_y, v.z)

F64.V3.scale(k: F64, v: F64.V3): F64.V3
  open v
  let new_x = F64.mul(k, v.x)
  let new_y = F64.mul(k, v.y)
  let new_z = F64.mul(k, v.z)
  F64.V3.new(new_x, new_y, new_z)

F64.V3.sqr_dist(a: F64.V3, b: F64.V3): F64 
  open a
  open b
  let two    = F64.add(F64.1, F64.1)
  let x_diff = F64.pow(F64.sub(a.x, b.x), two)
  let y_diff = F64.pow(F64.sub(a.y, b.y), two)
  let z_diff = F64.pow(F64.sub(a.z, b.z), two)
  F64.add(x_diff, F64.add(y_diff, z_diff))

F64.V3.sub(a: F64.V3, b: F64.V3): F64.V3 
  open a
  open b
  let c.x = F64.sub(a.x, a.x)
  let c.y = F64.sub(a.y, b.y)
  let c.z = F64.sub(a.z, b.z)
  F64.V3.new(c.x, c.y, c.z)

// TODO
// Converts a F64.V3 to a Pos32
F64.V3.to_pos32(pos: F64.V3): Pos32
  F64.V3.to_pos32(pos)

F64._1 : F64
  F64.parse_binary("0000000000000000000000000000000000000000000000000000111111111101")

// Arccos function.
F64.acos: F64 -> F64 //prim//
  F64.acos

// TODO Adds two 64-bit floats.
F64.add: F64 -> F64 -> F64 //prim//
  F64.add

// Arcsine function.
F64.asin: F64 -> F64 //prim//
  F64.asin

// Arctan function.
F64.atan: F64 -> F64 -> F64 //prim//
  F64.atan

F64.cmp(x: F64, y: F64): Cmp 
  open x
  open y 
  Word.cmp<64>(x.word, y.word)
  

F64.compare_numbers(a: F64, b: F64): F64.Ordering
  case F64.eql(a, b){
    true : F64.Ordering.EQ
    false: case F64.ltn(b, a){
      true : F64.Ordering.GT
      false: F64.Ordering.LT
    }
  }

// Cosine function.
F64.cos: F64 -> F64 //prim//
  F64.cos

// TODO Divides two 64-bit floats.
F64.div: F64 -> F64 -> F64 //prim//
  F64.div

F64.eql(x: F64, y: F64): Bool
  open x 
  open y 
  Word.eql<64>(x.word, y.word)


F64.ltn(a: F64, b: F64): Bool
  open a 
  open b 
  Word.ltn<64>(a.word, b.word)
  

// TODO Exponential function.
F64.exp: F64 -> F64 -> F64 //prim//
  F64.exp

F64.floor(x: F64): F64
  let ltn_zero = F64.if<_>(F64.from_bool(F64.ltn(x, F64.0)), F64.1, F64.0)
  F64.sub(F64.sub(x, F64.mod(x, F64.1)), ltn_zero)

F64.from_bool(b: Bool): F64 
  case b {
   true : F64.1,
   false: F64.0
  }

F64.gte(a: F64, b: F64): Bool
  open a 
  open b 
  Word.gte<64>(a.word, b.word)

F64.gtn(a: F64, b: F64): Bool
  open a 
  open b 
  Word.gtn<64>(a.word, b.word)

F64.if<A: Type>(x: F64, ct: A, cf: A): A
  case F64.eql(x, F64.0) {
   true : cf,
   false: ct
  }

// Is x inside the a..b range, with `b` exclusive?
F64.is_between(a: F64, b: F64, x: F64): Bool
  let a_eql_x = F64.eql(a, x) 
  let a_ltn_x = F64.ltn(a, x)
  let x_ltn_b = F64.ltn(x, b)
  Bool.or(a_eql_x, Bool.and(a_ltn_x, x_ltn_b))

// TODO: Logarithm function.
F64.log: F64 -> F64 //prim//
  F64.log

F64.lte(a: F64, b: F64): Bool
  open a 
  open b 
  Word.lte<64>(a.word, b.word)

// // TODO
F64.max: F64 -> F64 -> F64 //prim//
  F64.max

// TODO
F64.min: F64 -> F64 -> F64 //prim//
  F64.min

// TODO: Modulus of two 64-bit floats.
F64.mod: F64 -> F64 -> F64 //prim//
  F64.mod

// TODO Multiplies two 64-bit floats.
F64.mul: F64 -> F64 -> F64 //prim//
  F64.mul

// TODO
F64.parse: String -> F64
  F64.parse

F64.pi : F64
  F64.parse_binary("0001100010110100001000100010101011011111100001001001000000000010")

// TODO Power function
F64.pow: F64 -> F64 -> F64 //prim//
  F64.pow

F64.rotate2d(x: F64, y: F64, a: F64): Pair(F64, F64)
  let x2 = F64.sub(F64.mul(x, F64.cos(a)), F64.mul(y, F64.sin(a)))
  let y2 = F64.add(F64.mul(x, F64.sin(a)), F64.mul(y, F64.cos(a)))
  Pair.new<_,_>(x2, y2)

// TODO Sine function.
F64.sin: F64 -> F64 //prim//
  F64.sin

// Square root function.
F64.sqrt(n: F64): F64 //prim//
  F64.pow(n, F64.div(F64.1, F64.2))

// TODO Subtracts two 64-bit floats.
F64.sub: F64 -> F64 -> F64 //prim//
  F64.sub

//  TODO Tangent function.
F64.tan: F64 -> F64 //prim//
  F64.tan

// F64.tau: F64
//   6.28318530718

F64.to_u32(a: F64): U32
  F64.to_u32(a)

