type U64 {
  new(a: Word(64))
}

U64.0: U64
  U64.new(Word.zero(64))

U64.add(a: U64, b: U64): U64
  open a
  open b
  U64.new(Word.add<_>(a_val, b_val))

U64.and(a: U64, b: U64): U64
  open a
  open b
  U64.new(Word.and<_>(a_val, b_val))

U64.div(a: U64, b: U64): U64
  open a
  open b
  U64.new(Word.div<_>(a_val, b_val))

// a == b
U64.eql(a: U64, b: U64): Bool
  open a
  open b
  Word.eql<_>(a_val, b_val)

// a >= b
U64.gte(a: U64, b: U64): Bool
  open a
  open b
  Word.gte<_>(a_val, b_val)

// a > b
U64.gtn(a: U64, b: U64): Bool
  open a
  open b
  Word.gtn<_>(a_val, b_val)

U64.inc(a: U64): U64
  open a 
  U64.new(Word.inc<_>(a_val))

// a <= b
U64.lte(a: U64, b: U64): Bool
  open a
  open b
  Word.lte<_>(a_val, b_val)

// a < b
U64.ltn(a: U64, b: U64): Bool
  open a
  open b
  Word.ltn<_>(a_val, b_val)

// U64.mix.const0: U64
//   U64.parse_hex("ff51afd7ed558ccd")

// U64.mix.const1: U64
//   U64.parse_hex("c4ceb9fe1a85ec53")

U64.mod(a: U64, b: U64): U64
  open a 
  open b 
  U64.new(Word.mod<_>(a_val, b_val))

U64.mul(a: U64, b: U64): U64
  open a 
  open b 
  U64.new(Word.mul<_>(a_val, b_val))

U64.or(a: U64, b: U64): U64
  open a 
  open b 
  U64.new(Word.or<_>(a_val, b_val))

U64.parse_hex(str: String): U64
  U64.new(Word.from_bits(64, Bits.parse_hex(str)))

U64.pow(a: U64, b: U64): U64
  open a 
  open b 
  U64.new(Word.pow<_>(a_val, b_val))

U64.shl(n: U32, a: U64): U64
  U64.shl(n, a)

U64.shr(n: U64, a: U64): U64
  U64.shr(n, a)

U64.sub(a: U64, b: U64): U64
  open a 
  open b 
  U64.new(Word.sub<_>(a_val, b_val))

U64.to_bits(a: U64): Bits
  open a 
  Word.to_bits<_>(a_val)

// U64.to_nat(a: U64): Nat
//   open a 
//   Word.to_nat<_>(a_val)

U64.xor(a: U64, b: U64): U64
  open a 
  open b 
  U64.new(Word.xor<_>(a_val, b_val))

