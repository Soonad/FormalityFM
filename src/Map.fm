type Map <A: Type> {
  new,
  tie(val: Maybe(A), lft: Map(A), rgt: Map(A)),
}

Map.fold<A: Type>(map: Map(A)): <P: Type> -> P -> (Maybe(A) -> P -> P -> P) -> P
  <P> (new, tie)
  case map {
    new: new,
    tie: 
      tie(
        map.val,
        Map.fold<A>(map.lft)<P>(new, tie),
        Map.fold<A>(map.rgt)<P>(new, tie)),
  }

Map.get<A: Type>(bits: Bits, map: Map(A)): Maybe(A)
  case bits {
    e: case map {
      new: Maybe.none<_>,
      tie: map.val,
    }, 
    o: case map {
      new: Maybe.none<_>,
      tie: Map.get<_>(bits.pred, map.lft),
    },
    i: case map {
      new: Maybe.none<_>,
      tie: Map.get<_>(bits.pred, map.rgt),
    }
  }

Map.set<A: Type>(bits: Bits, val: A, map: Map(A)): Map(A)
  case bits {
    e: case map {
      new: Map.tie<_>(Maybe.some<_>(val), Map.new<_>, Map.new<_>),
      tie: Map.tie<_>(Maybe.some<_>(val), map.lft, map.rgt)
    },
    o: case map {
      new: Map.tie<_>(Maybe.none<_>, Map.set<_>(bits.pred, val, Map.new<_>), Map.new<_>),
      tie: Map.tie<_>(map.val, Map.set<_>(bits.pred, val, map.lft), map.rgt)
    },
    i: case map {
      new: Map.tie<_>(Maybe.none<_>, Map.new<_>, Map.set<_>(bits.pred, val, Map.new<_>)),
      tie: Map.tie<_>(map.val, map.lft, Map.set<_>(bits.pred, val, map.rgt))
    }
  }

Map.delete<A: Type>(key: Bits, map: Map(A)): Map(A)
  case map {
    new: Map.new<_>,
    tie: case key {
      e: Map.tie<_>(Maybe.none<_>, map.lft, map.rgt),
      o: Map.delete<_>(key.pred, map.lft),
      i: Map.delete<_>(key.pred, map.rgt)
    }
  }

Map.from_list<A: Type, B: Type>(f: A -> Bits, xs: List(Pair(A,B))): Map(B)
  case xs {
    nil : Map.new<_>,
    cons: case xs.head as p {
      new: Map.set<_>(f(p.fst), p.snd, Map.from_list<_,_>(f, xs.tail))
    }
  }

Map.to_list<A: Type>(xs: Map(A)): List(Pair(Bits,A))
  List.reverse<_>(Map.to_list.go<_>(xs, Bits.e, List.nil<_>))

Map.to_list.go<A: Type>(xs: Map(A), key: Bits, list: List(Pair(Bits,A))): List(Pair(Bits,A))
  case xs {
    new:
      list,
    tie: 
      let list0 = case xs.val {
        none: list,
        some: List.cons<_>(Pair.new<_,_>(Bits.reverse(key), xs.val.value), list),
      };
      let list1 = Map.to_list.go<_>(xs.lft, Bits.o(key), list0);
      let list2 = Map.to_list.go<_>(xs.rgt, Bits.i(key), list1);
      list2
  }

Map.keys<A: Type>(xs: Map(A)): List(Bits)
  List.reverse<_>(Map.keys.go<_>(xs, Bits.e, List.nil<_>))

Map.keys.go<A: Type>(xs: Map(A), key: Bits, list: List(Bits)): List(Bits)
  case xs {
    new:
      list,
    tie: 
      let list0 = case xs.val { none: list, some: List.cons<_>(Bits.reverse(key), list) };
      let list1 = Map.keys.go<_>(xs.lft, Bits.o(key), list0);
      let list2 = Map.keys.go<_>(xs.rgt, Bits.i(key), list1);
      list2
  }

Map.values<A: Type>(xs: Map(A)): List(A)
  Map.values.go<A>(xs, List.nil<_>)

Map.values.go<A: Type>(xs: Map(A), list: List(A)): List(A)
  case xs {
    new:
      list,
    tie: 
      let list0 = case xs.val { none: list, some: List.cons<_>(xs.val.value, list) };
      let list1 = Map.values.go<_>(xs.lft, list0);
      let list2 = Map.values.go<_>(xs.rgt, list1);
      list2
  }

Map.disj<A: Type>(a: Map(A), b: Map(A)): Bool
  case a {
    new: Bool.true,
    tie: case b {
      new: Bool.true,
      tie: 
        let v = case a.val {
          none: Bool.true,
          some: case b.val {
            none: Bool.true,
            some: Bool.false 
          }
        }
        Bool.and(v, Bool.and(Map.disj<_>(a.lft, b.lft), Map.disj<_>(a.rgt, b.rgt)))
    }
  }

// Returns the element stored at a given key and a copy of the map.
// Map.lookup<A: Type>(bits: Bits, val: A, map: Map(A)): Pair(A, Map(A))
//   case bits {
//     e: case map {
//       new: 
//         let map = Map.tie<A>(Maybe.some<A>(val), Map.new<A>, Map.new<A>)
//         Pair.new<A, Map(A)>(val, map),
//       tie:
//         let value = Maybe.extract<A>(map.val, val)
//         let map = Map.tie<A>(Maybe.some<A>(value), map.lft, map.rgt)
//         Pair.new<A, Map(A)>(value, map),
//       },
//     o: case map {
//       new:
//         // get p.fst p.snd = Map.lookup<A>(bits.pred, val, Map.new<A>)
//         let p = Map.lookup<A>(bits.pred, val, Map.new<A>)
//         case p{
//           new: Pair.new<A, Map(A)>(p.fst, Map.tie<A>(Maybe.none<A>, p.snd, Map.new<A>))
//         }
//       tie:
//         // get p.fst p.snd = Map.lookup<A>(bits.pred, val, map.lft)
//         let p = Map.lookup<A>(bits.pred, val, map.lft)
//         case p{
//           new: Pair.new<A, Map(A)>(p.fst, Map.tie<A>(map.val, p.snd, map.rgt))
//         }
//     },
//     i: case map {
//       new:
//         // get p.fst p.snd = Map.lookup<A>(bits.pred, val, Map.new<A>)
//         let p = Map.lookup<A>(bits.pred, val, Map.new<A>)
//         case p{
//           new: Pair.new<A, Map(A)>(p.fst, Map.tie<A>(Maybe.none<A>, Map.new<A>, p.snd))
//         }
//       tie:
//         // get p.fst p.snd = Map.lookup<A>(bits.pred, val, map.rgt)
//         let p = Map.lookup<A>(bits.pred, val, map.rgt)
//         case p {
//           new: Pair.new<A, Map(A)>(p.fst, Map.tie<A>(map.val, map.lft, p.snd))
//         }
//     }
//   }

Map.map<A: Type, B: Type>(fn: A -> B, map: Map(A)): Map(B)
  case map {
    new: Map.new<_>,
    tie:
      let val = case map.val {
        none: Maybe.none<_>,
        some: Maybe.some<_>(fn(map.val.value))
      }
      let lft = Map.map<A,B>(fn, map.lft)
      let rgt = Map.map<A,B>(fn, map.rgt)
      Map.tie<_>(val, lft, rgt) 
  }

// general merge function
Map.merge<A: Type,B: Type,C: Type>(
  a_not_b : Bits -> A -> Maybe(C),
  b_not_a : Bits -> B -> Maybe(C),
  a_and_b : Bits -> A -> B -> Maybe(C),
  a: Map(A),
  b: Map(B)
) : Map(C)
  Map.merge.go<_,_,_>(a_not_b,b_not_a,a_and_b,Bits.e,a,b)

Map.merge.go<A: Type,B: Type,C: Type>(
  f: Bits -> A -> Maybe(C),
  g: Bits -> B -> Maybe(C),
  h: Bits -> A -> B -> Maybe(C),
  key: Bits,
  a: Map(A),
  b: Map(B)
) : Map(C)
  case a {
    new: case b {
      new: Map.new<_>,
      tie:
        let val = case b.val as bv {
          none: Maybe.none<_>,
          some: g(key,bv.value)
        }
        Map.tie<_>(val,
          Map.merge.go<_,_,_>(f, g, h, Bits.o(key), Map.new<_>,b.lft),
          Map.merge.go<_,_,_>(f, g, h, Bits.i(key), Map.new<_>,b.rgt))
    },
    tie: case b {
      new: 
        let val = case a.val as av { 
          none: Maybe.none<_>, 
          some: f(key, av.value) 
        }
        Map.tie<_>(val,
          Map.merge.go<_,_,_>(f,g,h,Bits.o(key),a.lft,Map.new<_>),
          Map.merge.go<_,_,_>(f,g,h,Bits.i(key),a.rgt,Map.new<_>)),
      tie: 
        let val = case a.val as av {
          none: case b.val as bv {
            none: Maybe.none<_>, 
            some: g(key, bv.value)
          },
          some: case b.val as bv {
            none: f(key, av.value), 
            some: h(key, av.value, bv.value)
          }
        }
        Map.tie<_>(val,
          Map.merge.go<_,_,_>(f, g, h, Bits.o(key), a.lft, b.lft),
          Map.merge.go<_,_,_>(f, g, h, Bits.i(key), a.rgt, b.rgt))
    }
  }

// Modifies the element at a given key, returns it and a copy of the map.
// This used to be important on linear back-ends, but it isn't linear anymore.
// TODO: use `with` to make this function linear again.
Map.query<A: Type>(cpy: A -> Pair(A, A), bits: Bits, map: Map(A)): Pair(Map(A), Maybe(A))
  case bits {
  e: case map {
    new: 
      let map = Map.new<_>
      let val = Maybe.none<_>
      Pair.new<_,_>(map, val),
    tie: case map.val {
      none:
        let map = Map.tie<_>(Maybe.none<_>, map.lft, map.rgt)
        let val = Maybe.none<_>
        Pair.new<_,_>(map, val),
      some: case cpy(map.val.value) as p {
        new:
          let map = Map.tie<_>(Maybe.some<_>(p.fst), map.lft, map.rgt)
          let val = Maybe.some<_>(p.snd)
          Pair.new<_,_>(map, val)
      }
    }
  },
  o: case map {
    new:
      let map = Map.new<_>
      let val = Maybe.none<_>
      Pair.new<_,_>(map, val),
    tie: case Map.query<_>(cpy, bits.pred, map.lft) as p {
      new:
        let map = Map.tie<_>(map.val, p.fst, map.rgt)
        let val = p.snd
        Pair.new<_,_>(map, val)
    }
  },
  i: case map {
    new: 
      let map = Map.new<_>
      let val = Maybe.none<_>
      Pair.new<_,_>(map, val),
    tie: case Map.query<_>(cpy, bits.pred, map.rgt) as p {
      new:
        let map = Map.tie<_>(map.val, map.lft, p.fst)
        let val = p.snd
        Pair.new<_,_>(map, val)
      }
    }
  }


Map.Row(A : Type,key: Bits, x: A, xs: Map(A)) : Type
  case Map.get<A>(key,xs) as v {
    none: Empty,
    some: Equal(A,x,v.value)
  }

// combines two maps, preferring the left-hand map in case of duplicates entries
Map.union<A: Type>(a: Map(A), b: Map(A)): Map(A)
  case a {
    new: b,
    tie: case b {
      new: a,
      tie: case a.val {
        none: Map.tie<_>(b.val, Map.union<_>(a.lft,b.lft), Map.union<_>(a.rgt,b.rgt)),
        some: Map.tie<_>(a.val, Map.union<_>(a.lft,b.lft), Map.union<_>(a.rgt,b.rgt))
      }
    }
  }


